# Detailed Version 3 .cel file import

import csv, os, glob
import sys
import numpy

## http://www.stat.lsa.umich.edu/~kshedden/Courses/Stat545/Notes/AffxFileFormats/
##CEL FILE
##Description
##The CEL file stores the results of the intensity calculations on the pixel values of the DAT file. A single representative intensity value is stored per cell (feature) of the image. The information below will describe versions 3 and 4 of the CEL file format. Version 3 files were generated by the MAS software while version 4 files are generated by the GCOS software.
##
##Version 3 Format
##The format of the CEL file is an ASCII text file similar to the Windows INI format.
##
##The file is divided up into sections. The start of each section is defined by a line containing a section name enclosed in square braces. The section names are: "CEL", "HEADER", "INTENSITY", "MASKS", "OUTLIERS" and "MODIFIED". The data in each section is of the format TAG=VALUE.
##
##The "CEL" section contains the version number of the file. The TAGS are:
##TAG	Description
##Version	The version number. Always set to 3.
##
##The "HEADER" section contains miscellaneous header information. The TAGS are:
##TAG	Description
##Cols	The number of columns in the array (of cells).
##Rows	The number of rows in the array (of cells).
##TotalX	Same as Cols.
##TotalY	Same as Rows.
##OffsetX	Not used, always 0.
##OffsetY	Not used, always 0.
##GridCornerUL	XY coordinates of the upper left grid corner in pixel coordinates.
##GridCornerUR	XY coordinates of the upper right grid corner in pixel coordinates.
##GridCornerLR	XY coordinates of the lower right grid corner in pixel coordinates.
##GridCornerLL	XY coordinates of the lower left grid corner in pixel coordinates.
##Axis-InvertX	Not used, always 0.
##Axis-InvertY	Not used, always 0.
##swapXY	Not used, always 0.
##DatHeader	The header from the DAT file.
##Algorithm	The algorithm name used to create the CEL file.
##AlgorithmParameters	The parameters used by the algorithm. The format is TAG:VALUE pairs separated by semi-colons or TAG=VALUE pairs separated by spaces.
##
##The "INTENSITY" section contains intensity information. The TAGS are:
##TAG	Description
##NumberCells	The total number of cells in the array (Rows*Cols)
##CellHeader	The header for the remainder of the data in this section.
##The header is always set to: "X Y MEAN STDV NPIXELS"
##NA	The remaining lines in this section contain the intensity, standard deviation value and the number of pixels used to compute the intensity value for each cell in the array. The order is defined by the header.
##
##The "MASKS" section specifies which cells have been MASKSed by the user. The TAGS are:
##TAG	Description
##NumberCells	The number of MASKSed cells.
##CellHeader	The header for the remainder of the data in this section. The header is always set to: "X Y".
##NA	The remaining lines in this section contain the XY coordinates of those cells MASKSed by the user.
##
##The "OUTLIERS" section specifies which cells were called outliers by the software. The TAGS are:
##TAG	Description
##NumberCells	The number of outlier cells.
##CellHeader	The header for the remainder of the data in this section. The header is always set to: "X Y".
##NA	The remaining lines in this section contain the XY coordinates of those cells called outliers by the software.
##
##The "MODIFIED" section specifies which cells were modified by the user. This feature was dropped in MAS 4 thus the number of cells in this section should always be 0. The TAGS are:
##TAG	Description
##NumberCells	The number of outlier cells.
##CellHeader	The header for the remainder of the data in this section. The header is always set to: "X Y ORIGMEAN".
##NA	The remaining lines in this section contain the XY coordinates and the original intensity value (calculated by the software) of those cells modified by the user.
##[CEL]
##Version=3
##
##[HEADER]
##Cols=478
##Rows=478
##TotalX=478
##TotalY=478
##OffsetX=0
##OffsetY=0
##GridCornerUL=206 129
##GridCornerUR=3570 107
##GridCornerLR=3597 3470
##GridCornerLL=234 3492
##Axis-invertX=0
##AxisInvertY=0
##swapXY=0
##DatHeader=[11..65533]  1g_A9AF:CLS=3684 RWS=3684 XIN=1  YIN=1  VE=30        2.0 08/23/07 11:23:24 50205880  M10      Tgondii_SNP1.1sq          570  25356.509766  3.500000  1.5600  6
##Algorithm=Percentile
##AlgorithmParameters=Percentile:75;CellMargin:2;OutlierHigh:1.500;OutlierLow:1.004;AlgVersion:6.0;FixedCellSize:TRUE;FullFeatureWidth:7;FullFeatureHeight:7;IgnoreOutliersInShiftRows:FALSE;FeatureExtraction:TRUE;PoolWidthExtenstion:2;PoolHeightExtension:2;UseSubgrids:FALSE;RandomizePixels:FALSE;ErrorBasis:StdvMean;StdMult:1.000000
##
##[INTENSITY]
##NumberCells=228484
##CellHeader=X	Y	MEAN	STDV	NPIXELS


class affycel:
    def _int_(self, filename, version, header, intensityCells, intensity, maskscells, masks, outlierCells, outliers, modifiedCells, modified):
        self.filename = filename
        self.version = version
        self.header = {}
        self.intensityCells = intensityCells
        self.intensity = intensity
        self.masksCells = maskscells
        self.masks = masks
        self.outliersCells = outlierCells
        self.outliers = outliers
        self.modifiedCells = modifiedCells
        self.modfied = modified
        self.custom = {}
        
    def read_cel(self, filename):
        reader = csv.reader(open(filename, "U"),delimiter='\t')
        self.filename = os.path.split(filename)[1]
        # continu past these def to the next step

        def Rcel(row, areader):
            if '[CEL]' in row: #row passed in should contain '[CEL]'
                for row in areader: #Skips '[CEL]' row that was passed in
                    if row: # skips blank rows
                        print 'cell', row
                        if not any(("[HEADER]" in row, "[INTENSITY]" in row, "[MASKS]" in row, "[OUTLIERS]" in row, "[MODIFIED]" in row)):
                            self.version = int(row[0].partition('=')[2])
                            print self.version
                            #self.version = row
                        else: 
                            rsel[row[0]](row, areader) # Go to correct section
                    
        def Rheader(row, areader):
            if '[HEADER]' in row: #row passed in should contain '[HEADER]'
                self.header = {} #self.header is a dictionary
                for row in reader: # skips the section heading row
                    if row: #skips blank rows
                        if not any(("[CEL]" in row, "[INTENSITY]" in row, "[MASKS]" in row, "[OUTLIERS]" in row, "[MODIFIED]" in row)):
                            self.header[str(row[0].partition('=')[0])] = str(row[0].partition('=')[2])
                        else:
                            rsel[row[0]](row, areader) # Go to correct section
                
        def Rintensity(row, areader):
            print 'start intencity', row 
            data = []
            if "[INTENSITY]" in row: #row passed in should contain '[INTENSITY]'
                row = areader.next() # moves to the row after "[INTENSITY]"
                self.intensityCells = int(row[0].partition('=')[2]) #gets the number of intensities
                areader.next() #skips the colmn headings
                print 'cont', row
                for row in reader:
                    if row: 
                        if not any(("[CEL]" in row, "[HEADER]" in row, "[MASKS]" in row, "[OUTLIERS]" in row, "[MODIFIED]" in row)):
                            #row = [(int(x[0]), int(x[1]), numpy.float64(x[2]), numpy.float64(x[3]), int(x[4])) for x in row]
                            data.append(tuple(row))
                            #print data[len(data)-1]
                        else:
                            #self.data = data
                            self.intensity = numpy.array(data, [('x',int),('y',int),('mean',numpy.float64),('stdv',numpy.float64),('npixcels',int)])
                            rsel[row[0]](row, areader)
            
        def Rmasks(row, areader):
            data = []
            maskstype = [('x', int), ('y', int)]
            if "[MASKS]" in row:
                            row = areader.next() # moves to the row after "[INTENSITY]"
                            self.masksCells = int(row[0].partition('=')[2]) #gets the number of intensities
                            areader.next() #skips the colmn headings
            for row in reader:
                if row:
                    if not any(("[CEL]" in row, "[HEADER]" in row, "[INTESITY]" in row, "[OUTLIERS]" in row, "[MODIFIED]" in row)):
                        
                        data.append(row)
                    else:
                        self.masks = numpy.array(data, dtype = int)
                        rsel[row[0]](row, areader)
            
        def Routliers(row, areader):
            data = []
            outlierstype = [('x', int), ('y', int)]
            if "[OUTLIERS]" in row:
                            row = areader.next() # moves to the row after "[INTENSITY]"
                            self.outliersCells = int(row[0].partition('=')[2]) #gets the number of intensities
                            areader.next() #skips the colmn headings
            for row in reader:
                if row:
                    if not any(("[CEL]" in row, "[HEADER]" in row, "[INTESITY]" in row, "[MASKS]" in row, "[MODIFIED]" in row)):
                        data.append(row)
                    else:
                        self.outliers = numpy.array(data, dtype = int)
                        rsel[row[0]](row, areader)
            
        def Rmodified(row, areader):
            data = []
            modifiedtype = [('x', int), ('y', int), ('ORIGMEAN', float)]
            if "[MODIFIED]" in row:
                            row = areader.next() # moves to the row after "[INTENSITY]"
                            self.modifiedCells = int(row[0].partition('=')[2]) #gets the number of intensities
                            areader.next() #skips the colmn headings
            for row in reader:
                if row:
                    if not any(("[CEL]" in row, "[HEADER]" in row, "[INTESITY]" in row, "[MASKS]" in row, "[OUTLIERS]" in row)):
                        data.append(row)
                    else:
                        self.modified[masks] = numpy.array(data, dtype=float64)
                        #rsel[row[0]](row, areader)
            
        rsel = {}
        rsel['[CEL]'] = Rcel
        rsel['[HEADER]']= Rheader
        rsel['[INTENSITY]']= Rintensity
        rsel['[MASKS]']= Rmasks
        rsel['[OUTLIERS]']= Routliers
        rsel['[MODIFIED]']= Rmodified        
        
        def read_selector(areader):
            for row in areader:
                print 's1', row
                if row:
                    if any(("[CEL]" in row, "[HEADER]" in row, "[INTENSITY]" in row, "[MASKS]" in row, "[OUTLIERS]" in row, "[MODIFIED]" in row)):
                        print 's2',row
                        rsel[row[0]](row, areader)
                    else: print '*****something went wrong*******'
        read_selector(reader)

        
a = affycel()
a.read_cel("/Users/vmd/Dropbox/dna/data/1g_A9AF-1.CEL")